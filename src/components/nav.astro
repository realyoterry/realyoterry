---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: 'Home',
    href: '#home',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V9.48907C3 9.18048 3.14247 8.88917 3.38606 8.69972L11.3861 2.47749C11.7472 2.19663 12.2528 2.19663 12.6139 2.47749L20.6139 8.69972C20.8575 8.88917 21 9.18048 21 9.48907V20ZM19 19V9.97815L12 4.53371L5 9.97815V19H19Z"></path></svg>`,
  },
  {
    label: 'Projects',
    href: '#projects',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M4 5V19H20V7H11.5858L9.58579 5H4ZM12.4142 5H21C21.5523 5 22 5.44772 22 6V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H10.4142L12.4142 5Z"></path></svg>`,
  },
  {
    label: 'Contact',
    href: '#contact',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21.7267 2.95694L16.2734 22.0432C16.1225 22.5716 15.7979 22.5956 15.5563 22.1126L11 13L1.9229 9.36919C1.41322 9.16532 1.41953 8.86022 1.95695 8.68108L21.0432 2.31901C21.5716 2.14285 21.8747 2.43866 21.7267 2.95694ZM19.0353 5.09647L6.81221 9.17085L12.4488 11.4255L15.4895 17.5068L19.0353 5.09647Z"></path></svg>`,
  },
];
---

<div class="flex justify-center w-full">
  <nav class="fixed flex left-0 right-0 z-[100] bg-[var(--dark-transparent)] border border-1 border-[var(--white-icon-tr)] backdrop-blur-xl transition-all md:top-0 md:bottom-auto bottom-0 md:w-[20rem] rounded-t-2xl md:rounded-full md:mt-6 md:justify-self-center">
    <div class="container mx-auto flex justify-center items-center p-3">
      <ul class="flex w-full justify-between md:space-x-6 md:justify-center md:gap-4 gap-6">
        {
          navItems.map((item) => (
            <li class="flex-1 md:flex-none">
              <a href={item.href} class="flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base">
                <span class="md:hidden flex items-center justify-center w-6 h-6">
                  <fragment set:html={item.icon} />
                </span>
                <span class="hidden md:inline-block">{item.label}</span>
                <span class="md:hidden">{item.label}</span>
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
  <div id="themeToggle" class="group cursor-pointer fixed flex right-[20px] z-[100] bg-[var(--dark-transparent)] border border-1 border-[var(--white-icon-tr)] backdrop-blur-xl transition-all rounded-full mt-6 md:justify-self-center w-12 h-12 flex items-center justify-center">
    <i id="sunIcon" class="fa-light fa-sun-bright fa-xl text-[var(--white-icon)] dark:group-hover:text-black group-hover:text-white transition-all duration-500 rotate-180 opacity-0"></i>
    <i id="moonIcon" class="fa-solid fa-moon-stars fa-xl text-[var(--white-icon)] dark:group-hover:text-black absolute opacity-0 group-hover:text-white transition-all duration-500"></i>
  </div>
</div>

<script>
  const toggleButton = document.getElementById('themeToggle');
  const sunIcon = document.getElementById('sunIcon');
  const moonIcon = document.getElementById('moonIcon');

  toggleButton.addEventListener('click', () => {
    const isLightMode = localStorage.getItem('lightMode') === 'true';
    if (isLightMode) {
      window.dispatchEvent(new CustomEvent('themeChange', { detail: 'dark' }));
      // Switch to dark mode
      document.documentElement.classList.remove('dark');
      localStorage.setItem('lightMode', 'false');
      sunIcon.classList.add('rotate-180', 'opacity-0');
      moonIcon.classList.remove('opacity-0');
      moonIcon.classList.add('rotate-[360deg]');
    } else {
      window.dispatchEvent(new CustomEvent('themeChange', { detail: 'light' }));
      // Switch to light mode
      document.documentElement.classList.add('dark');
      localStorage.setItem('lightMode', 'true');
      sunIcon.classList.remove('rotate-180', 'opacity-0');
      moonIcon.classList.add('opacity-0');
      moonIcon.classList.remove('rotate-[360deg]');
    }
  });

  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();

      const target = e.currentTarget as HTMLAnchorElement;
      const targetId = target.getAttribute('href')?.substring(1) || '';
      const targetElement = document.getElementById(targetId);

      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: 'smooth',
        });
      }
    });
  });

  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll("nav a[href^='#']");
    const observerOptions = { threshold: 0.6 };

    const observerCallback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => link.classList.remove('active'));
          const id = entry.target.getAttribute('id');
          const activeLink = document.querySelector(`nav a[href="#${id}"]`);
          if (activeLink) {
            activeLink.classList.add('active');
          }
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);
    sections.forEach((section) => observer.observe(section));
  });
</script>

<style>
  @media (max-width: 767px) {
    body {
      padding-bottom: 70px;
    }
  }

  nav a.active {
    color: white;
  }

  html.dark nav a.active {
    color: black !important;
  }
</style>
